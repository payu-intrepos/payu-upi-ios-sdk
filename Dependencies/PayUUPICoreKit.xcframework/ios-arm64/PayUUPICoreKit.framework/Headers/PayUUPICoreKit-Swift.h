#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef PAYUUPICOREKIT_SWIFT_H
#define PAYUUPICOREKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PayUUPICoreKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)






typedef SWIFT_ENUM(NSInteger, NetworkEnvironment, open) {
  NetworkEnvironmentProduction = 0,
  NetworkEnvironmentTest = 1,
  NetworkEnvironmentMobiletest = 2,
  NetworkEnvironmentMobileDev = 3,
  NetworkEnvironmentSdkTest = 4,
  NetworkEnvironmentBizcheckouttest = 5,
};


SWIFT_CLASS("_TtC14PayUUPICoreKit7PayUAPI")
@interface PayUAPI : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;

SWIFT_CLASS("_TtC14PayUUPICoreKit21PayUActivityIndicator")
@interface PayUActivityIndicator : NSObject
- (void)setupActivityIndicatorOnView:(UIView * _Nonnull)view alpha:(CGFloat)alpha;
- (void)stop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit18PayUAnalyticsEvent")
@interface PayUAnalyticsEvent : NSObject
+ (void)transactionStarted;
+ (void)transactionFinished;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;
enum PayUPaymentVerificationMode : NSInteger;

SWIFT_CLASS("_TtC14PayUUPICoreKit19PayUAnalyticsSender")
@interface PayUAnalyticsSender : NSObject
+ (void)sendOneTimeAnalytics;
+ (void)sendTxnStatus:(NSString * _Nonnull)status;
+ (void)sendPaymentVerifidBy:(enum PayUPaymentVerificationMode)verifier;
+ (void)sendUserAction:(NSString * _Nonnull)action;
+ (void)sendTotalTxnTime:(NSInteger)time;
+ (void)sendPaymentVerifiedIn:(NSInteger)time;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC14PayUUPICoreKit10PayUBaseVC")
@interface PayUBaseVC : UIViewController
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit20PayUFoundationStream")
@interface PayUFoundationStream : NSObject <NSStreamDelegate>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit15PayUHybridUtils")
@interface PayUHybridUtils : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit23PayUHybridVpaAPIHandler")
@interface PayUHybridVpaAPIHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PayUUPIPaymentOptions;
@class PayUPaymentParam;
@class PayUSupportedIntentApp;

SWIFT_CLASS("_TtC14PayUUPICoreKit19PayUIntentPaymentVC")
@interface PayUIntentPaymentVC : PayUBaseVC
@property (nonatomic, strong) PayUUPIPaymentOptions * _Null_unspecified availableUpiOptions;
@property (nonatomic, strong) PayUPaymentParam * _Null_unspecified paymentParams;
@property (nonatomic, strong) PayUSupportedIntentApp * _Null_unspecified paymentApp;
@property (nonatomic) BOOL bypassCanOpenAppChecks;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit16PayULoaderBaseVC")
@interface PayULoaderBaseVC : UIViewController
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit23PayULoaderIntentPayment")
@interface PayULoaderIntentPayment : PayULoaderBaseVC
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit26PayULoaderUPIAuthorisation")
@interface PayULoaderUPIAuthorisation : PayULoaderBaseVC
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

enum PayUUPIType : NSInteger;
@class PayUSupportedCollectApp;

SWIFT_CLASS("_TtC14PayUUPICoreKit14PayUPaymentApp")
@interface PayUPaymentApp : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PHONEPE;)
+ (NSString * _Nonnull)PHONEPE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull GPAY;)
+ (NSString * _Nonnull)GPAY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PAYTM;)
+ (NSString * _Nonnull)PAYTM SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BHIM;)
+ (NSString * _Nonnull)BHIM SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CREDPAY;)
+ (NSString * _Nonnull)CREDPAY SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) enum PayUUPIType paymentType;
@property (nonatomic, readonly, strong) PayUSupportedCollectApp * _Nullable appData;
+ (PayUPaymentApp * _Nonnull)phonepeWithAppData:(PayUSupportedCollectApp * _Nonnull)appData SWIFT_WARN_UNUSED_RESULT;
+ (PayUPaymentApp * _Nonnull)gpayWithAppData:(PayUSupportedCollectApp * _Nonnull)appData SWIFT_WARN_UNUSED_RESULT;
+ (PayUPaymentApp * _Nonnull)paytmWithAppData:(PayUSupportedCollectApp * _Nonnull)appData SWIFT_WARN_UNUSED_RESULT;
+ (PayUPaymentApp * _Nonnull)bhimWithAppData:(PayUSupportedCollectApp * _Nonnull)appData SWIFT_WARN_UNUSED_RESULT;
+ (PayUPaymentApp * _Nonnull)credPayWithAppData:(PayUSupportedCollectApp * _Nonnull)appData SWIFT_WARN_UNUSED_RESULT;
+ (PayUPaymentApp * _Nonnull)gpayOmni SWIFT_WARN_UNUSED_RESULT;
+ (PayUPaymentApp * _Nonnull)unknown SWIFT_WARN_UNUSED_RESULT;
+ (PayUPaymentApp * _Nonnull)newType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface PayUPaymentApp (SWIFT_EXTENSION(PayUUPICoreKit))
+ (PayUPaymentApp * _Nullable)fromCollectApp:(PayUSupportedCollectApp * _Nonnull)collectApp SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

@interface PayUPaymentApp (SWIFT_EXTENSION(PayUUPICoreKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull checkoutDisplayName;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull loaderDisplayName;
@property (nonatomic, readonly, strong) UIImage * _Nonnull iconImage;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull suffixList;
@property (nonatomic, readonly, copy) NSString * _Nonnull validationRegex;
@property (nonatomic, readonly) BOOL isVPAValidationRequired;
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit17PayUPaymentOption")
@interface PayUPaymentOption : NSObject
@property (nonatomic, copy) NSArray<PayUSupportedIntentApp *> * _Nullable supportedApps;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PayUPureS2SModel;

SWIFT_CLASS("_TtC14PayUUPICoreKit26PayUPaymentResponseHandler")
@interface PayUPaymentResponseHandler : NSObject
@property (nonatomic, copy) void (^ _Nullable remainingSecondsCallback)(NSInteger);
@property (nonatomic) NSInteger allotedTimeForTxn;
@property (nonatomic, readonly) NSInteger remainingSeconds;
@property (nonatomic, readonly) NSInteger forceCheckStatusInterval;
- (nonnull instancetype)initWithConnectionData:(PayUPureS2SModel * _Nonnull)data remainingTime:(NSInteger)remainingTime OBJC_DESIGNATED_INITIALIZER;
- (void)cleanUp;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PayUPaymentStatus;

@interface PayUPaymentResponseHandler (SWIFT_EXTENSION(PayUUPICoreKit))
- (void)consumePaymentStatus:(PayUPaymentStatus * _Nonnull)status forVerificationMode:(enum PayUPaymentVerificationMode)mode;
@end


@interface PayUPaymentResponseHandler (SWIFT_EXTENSION(PayUUPICoreKit))
- (void)checkPaymentStatus;
@property (nonatomic, readonly) BOOL shouldForceCheckPaymentStatus;
@property (nonatomic, readonly) BOOL shouldCheckPaymentStatus;
@property (nonatomic, readonly) BOOL shouldVerifyResponseFromSocket;
- (void)finishTransaction;
- (void)finishTransactionWithIsMerchantCancelling:(BOOL)isMerchantCancelling;
- (void)cancelTransactionWithCompletion:(void (^ _Nonnull)(PayUPaymentStatus * _Nonnull))completion;
- (void)checkPaymentStatusWithForcefully:(BOOL)forcefully completion:(void (^ _Nonnull)(PayUPaymentStatus * _Nonnull))completion;
@end

enum PayUPaymentStatusType : NSInteger;

SWIFT_CLASS("_TtC14PayUUPICoreKit17PayUPaymentStatus")
@interface PayUPaymentStatus : NSObject
@property (nonatomic, readonly) enum PayUPaymentStatusType type;
+ (PayUPaymentStatus * _Nonnull)pending SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PayUPaymentStatusType, open) {
  PayUPaymentStatusTypePending = 0,
  PayUPaymentStatusTypeError = 1,
  PayUPaymentStatusTypeComplete = 2,
};

typedef SWIFT_ENUM(NSInteger, PayUPaymentVerificationMode, open) {
  PayUPaymentVerificationModeSocket = 0,
  PayUPaymentVerificationModeHttp = 1,
};

@class NSDate;

SWIFT_CLASS("_TtC14PayUUPICoreKit19PayUPersistentStore")
@interface PayUPersistentStore : NSObject
+ (void)saveRemainingTxnSecsBeforeMovingToBackground:(NSInteger)seconds txnUniqueId:(NSString * _Nonnull)txnUniqueId;
+ (void)removeRemainingTxnSecsBeforeMovingToBackground;
+ (void)saveBackgroundEnteringTimeStamp:(NSDate * _Nonnull)dateTime txnUniqueId:(NSString * _Nonnull)txnUniqueId;
+ (NSDate * _Nullable)getBackgroundEnteringTimeStampForTxnUniqueId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
+ (void)removeBackgroundEnteringTimeStamp;
+ (void)saveSocketConnectionModel:(PayUPureS2SModel * _Nonnull)model;
+ (PayUPureS2SModel * _Nullable)getSocketConnectionModel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit16PayUPureS2SModel")
@interface PayUPureS2SModel : NSObject
@property (nonatomic, copy) NSString * _Nonnull referenceId;
@property (nonatomic, copy) NSString * _Nonnull pushServiceUrl;
@property (nonatomic, copy) NSString * _Nonnull pushServiceUrlV2;
@property (nonatomic, copy) NSString * _Nonnull upiServicePollInterval;
@property (nonatomic, copy) NSString * _Nonnull sdkUpiPushExpiry;
@property (nonatomic, copy) NSString * _Nonnull sdkUpiVerificationInterval;
@property (nonatomic, copy) NSString * _Nonnull encodedPayuId;
@property (nonatomic, copy) NSString * _Nullable intentURIData;
@property (nonatomic, copy) NSString * _Nullable appName;
@property (nonatomic, copy) NSString * _Nullable amount;
@property (nonatomic, copy) NSString * _Nullable txnId;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nullable returnUrl;
@property (nonatomic, copy) NSString * _Nullable merchantName;
@property (nonatomic, copy) NSString * _Nullable merchantVpa;
@property (nonatomic, copy) NSString * _Nullable vpaRegex;
@property (nonatomic, copy) NSString * _Nullable result;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit12PayUSDKError")
@interface PayUSDKError : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull socketURLError;)
+ (NSString * _Nonnull)socketURLError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull decodingError;)
+ (NSString * _Nonnull)decodingError SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dataUnavailable;)
+ (NSString * _Nonnull)dataUnavailable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull backButtonTxnCancelled;)
+ (NSString * _Nonnull)backButtonTxnCancelled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull unknownErrorMsg;)
+ (NSString * _Nonnull)unknownErrorMsg SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull internetUnavailable;)
+ (NSString * _Nonnull)internetUnavailable SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

SWIFT_CLASS("_TtC14PayUUPICoreKit12PayUSnackBar")
@interface PayUSnackBar : NSObject
- (void)showWithMessage:(NSString * _Nonnull)msg backgroundColor:(UIColor * _Nonnull)backgroundColor foreGroundColor:(UIColor * _Nonnull)foreGroundColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A class that represents a waiting ack call.
/// <em>NOTE</em>: You should not store this beyond the life of the event handler.
SWIFT_CLASS("_TtC14PayUUPICoreKit20PayUSocketAckEmitter")
@interface PayUSocketAckEmitter : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents some event that was received.
SWIFT_CLASS("_TtC14PayUUPICoreKit18PayUSocketAnyEvent")
@interface PayUSocketAnyEvent : NSObject
/// The event name.
@property (nonatomic, readonly, copy) NSString * _Nonnull event;
/// The data items for this event.
@property (nonatomic, readonly, copy) NSArray * _Nullable items;
/// The description of this event.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSHTTPCookie;
@class NSURL;
@class PayUWebSocket;
@protocol PayUSocketEngineClient;
@class NSData;
enum PayUSocketEnginePacketType : NSInteger;

SWIFT_CLASS("_TtC14PayUUPICoreKit16PayUSocketEngine")
@interface PayUSocketEngine : NSObject <NSURLSessionDelegate>
/// The queue that all engine actions take place on.
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull engineQueue;
/// The connect parameters sent during a connect.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable connectParams;
/// A dictionary of extra http headers that will be set during connection.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable extraHeaders;
/// <code>true</code> if this engine is closed.
@property (nonatomic, readonly) BOOL closed;
/// <code>true</code> if this engine is connected. Connected means that the initial poll connect has succeeded.
@property (nonatomic, readonly) BOOL connected;
/// An array of HTTPCookies that are sent during the connection.
@property (nonatomic, readonly, copy) NSArray<NSHTTPCookie *> * _Nullable cookies;
/// When <code>true</code>, the engine is in the process of switching to WebSockets.
/// <em>Do not touch this directly</em>
@property (nonatomic, readonly) BOOL fastUpgrade;
/// When <code>true</code>, the engine will only use HTTP long-polling as a transport.
@property (nonatomic, readonly) BOOL forcePolling;
/// When <code>true</code>, the engine will only use WebSockets as a transport.
@property (nonatomic, readonly) BOOL forceWebsockets;
/// If <code>true</code>, the engine is currently in HTTP long-polling mode.
@property (nonatomic, readonly) BOOL polling;
/// If <code>true</code>, the engine is currently seeing whether it can upgrade to WebSockets.
@property (nonatomic, readonly) BOOL probing;
/// The session id for this engine.
@property (nonatomic, readonly, copy) NSString * _Nonnull sid;
/// The path to engine.io.
@property (nonatomic, readonly, copy) NSString * _Nonnull socketPath;
@property (nonatomic, readonly, copy) NSURL * _Nonnull urlPolling;
@property (nonatomic, readonly, copy) NSURL * _Nonnull urlWebSocket;
/// The WebSocket for this engine.
@property (nonatomic, readonly, strong) PayUWebSocket * _Nullable ws;
/// The client for this engine.
@property (nonatomic, weak) id <PayUSocketEngineClient> _Nullable client;
/// Starts the connection to the server.
- (void)connect;
/// Called when an error happens during execution. Causes a disconnection.
- (void)didErrorWithReason:(NSString * _Nonnull)reason;
/// Disconnects from the server.
/// \param reason The reason for the disconnection. This is communicated up to the client.
///
- (void)disconnectWithReason:(NSString * _Nonnull)reason;
/// Called to switch from HTTP long-polling to WebSockets. After calling this method the engine will be in
/// WebSocket mode.
/// <em>You shouldn’t call this directly</em>
- (void)doFastUpgrade;
/// Causes any packets that were waiting for POSTing to be sent through the WebSocket. This happens because when
/// the engine is attempting to upgrade to WebSocket it does not do any POSTing.
/// <em>You shouldn’t call this directly</em>
- (void)flushWaitingForPostToWebSocket;
/// Parses raw binary received from engine.io.
/// \param data The data to parse.
///
- (void)parseEngineData:(NSData * _Nonnull)data;
/// Parses a raw engine.io packet.
/// \param message The message to parse.
///
- (void)parseEngineMessage:(NSString * _Nonnull)message;
/// Writes a message to engine.io, independent of transport.
/// \param msg The message to send.
///
/// \param type The type of this message.
///
/// \param data Any data that this message has.
///
/// \param completion Callback called on transport write completion.
///
- (void)write:(NSString * _Nonnull)msg withType:(enum PayUSocketEnginePacketType)type withData:(NSArray<NSData *> * _Nonnull)data completion:(void (^ _Nullable)(void))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Declares that a type will be a delegate to an engine.
SWIFT_PROTOCOL("_TtP14PayUUPICoreKit22PayUSocketEngineClient_")
@protocol PayUSocketEngineClient
/// Called when the engine errors.
/// \param reason The reason the engine errored.
///
- (void)engineDidErrorWithReason:(NSString * _Nonnull)reason;
/// Called when the engine closes.
/// \param reason The reason that the engine closed.
///
- (void)engineDidCloseWithReason:(NSString * _Nonnull)reason;
/// Called when the engine opens.
/// \param reason The reason the engine opened.
///
- (void)engineDidOpenWithReason:(NSString * _Nonnull)reason;
/// Called when the engine receives a pong message.
- (void)engineDidReceivePong;
/// Called when the engine sends a ping to the server.
- (void)engineDidSendPing;
/// Called when the engine has a message that must be parsed.
/// \param msg The message that needs parsing.
///
- (void)parseEngineMessage:(NSString * _Nonnull)msg;
/// Called when the engine receives binary data.
/// \param data The data the engine received.
///
- (void)parseEngineBinaryData:(NSData * _Nonnull)data;
/// Called when when upgrading the http connection to a websocket connection.
/// \param headers The http headers.
///
- (void)engineDidWebsocketUpgradeWithHeaders:(NSDictionary<NSString *, NSString *> * _Nonnull)headers;
@end

/// Represents the type of engine.io packet types.
typedef SWIFT_ENUM(NSInteger, PayUSocketEnginePacketType, open) {
/// Open message.
  PayUSocketEnginePacketTypeOpen = 0,
/// Close message.
  PayUSocketEnginePacketTypeClose = 1,
/// Ping message.
  PayUSocketEnginePacketTypePing = 2,
/// Pong message.
  PayUSocketEnginePacketTypePong = 3,
/// Regular message.
  PayUSocketEnginePacketTypeMessage = 4,
/// Upgrade message.
  PayUSocketEnginePacketTypeUpgrade = 5,
/// NOOP.
  PayUSocketEnginePacketTypeNoop = 6,
};


SWIFT_PROTOCOL("_TtP14PayUUPICoreKit20PayUSocketEngineSpec_")
@protocol PayUSocketEngineSpec
/// The client for this engine.
@property (nonatomic, strong) id <PayUSocketEngineClient> _Nullable client;
/// <code>true</code> if this engine is closed.
@property (nonatomic, readonly) BOOL closed;
/// <code>true</code> if this engine is connected. Connected means that the initial poll connect has succeeded.
@property (nonatomic, readonly) BOOL connected;
/// The connect parameters sent during a connect.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable connectParams;
/// An array of HTTPCookies that are sent during the connection.
@property (nonatomic, readonly, copy) NSArray<NSHTTPCookie *> * _Nullable cookies;
/// The queue that all engine actions take place on.
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull engineQueue;
/// A dictionary of extra http headers that will be set during connection.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable extraHeaders;
/// When <code>true</code>, the engine is in the process of switching to WebSockets.
@property (nonatomic, readonly) BOOL fastUpgrade;
/// When <code>true</code>, the engine will only use HTTP long-polling as a transport.
@property (nonatomic, readonly) BOOL forcePolling;
/// When <code>true</code>, the engine will only use WebSockets as a transport.
@property (nonatomic, readonly) BOOL forceWebsockets;
/// If <code>true</code>, the engine is currently in HTTP long-polling mode.
@property (nonatomic, readonly) BOOL polling;
/// If <code>true</code>, the engine is currently seeing whether it can upgrade to WebSockets.
@property (nonatomic, readonly) BOOL probing;
/// The session id for this engine.
@property (nonatomic, readonly, copy) NSString * _Nonnull sid;
/// The path to engine.io.
@property (nonatomic, readonly, copy) NSString * _Nonnull socketPath;
/// The url for polling.
@property (nonatomic, readonly, copy) NSURL * _Nonnull urlPolling;
/// The url for WebSockets.
@property (nonatomic, readonly, copy) NSURL * _Nonnull urlWebSocket;
/// The WebSocket for this engine.
@property (nonatomic, readonly, strong) PayUWebSocket * _Nullable ws;
/// Starts the connection to the server.
- (void)connect;
/// Called when an error happens during execution. Causes a disconnection.
- (void)didErrorWithReason:(NSString * _Nonnull)reason;
/// Disconnects from the server.
/// \param reason The reason for the disconnection. This is communicated up to the client.
///
- (void)disconnectWithReason:(NSString * _Nonnull)reason;
/// Called to switch from HTTP long-polling to WebSockets. After calling this method the engine will be in
/// WebSocket mode.
/// <em>You shouldn’t call this directly</em>
- (void)doFastUpgrade;
/// Causes any packets that were waiting for POSTing to be sent through the WebSocket. This happens because when
/// the engine is attempting to upgrade to WebSocket it does not do any POSTing.
/// <em>You shouldn’t call this directly</em>
- (void)flushWaitingForPostToWebSocket;
/// Parses raw binary received from engine.io.
/// \param data The data to parse.
///
- (void)parseEngineData:(NSData * _Nonnull)data;
/// Parses a raw engine.io packet.
/// \param message The message to parse.
///
- (void)parseEngineMessage:(NSString * _Nonnull)message;
/// Writes a message to engine.io, independent of transport.
/// \param msg The message to send.
///
/// \param type The type of this message.
///
/// \param data Any data that this message has.
///
/// \param completion Callback called on transport write completion.
///
- (void)write:(NSString * _Nonnull)msg withType:(enum PayUSocketEnginePacketType)type withData:(NSArray<NSData *> * _Nonnull)data completion:(void (^ _Nullable)(void))completion;
@end

@protocol PayUSocketManagerSpec;
enum PayUSocketIOStatus : NSInteger;
@class NSUUID;

/// Represents a socket.io-client.
/// Clients are created through a <code>SocketManager</code>, which owns the <code>SocketEngineSpec</code> that controls the connection to the server.
/// For example:
/// \code
/// // Create a socket for the /swift namespace
/// let socket = manager.socket(forNamespace: "/swift")
///
/// // Add some handlers and connect
///
/// \endcode<em>NOTE</em>: The client is not thread/queue safe, all interaction with the socket should be done on the <code>manager.handleQueue</code>
SWIFT_CLASS("_TtC14PayUUPICoreKit18PayUSocketIOClient")
@interface PayUSocketIOClient : NSObject
/// The namespace that this socket is currently connected to.
/// <em>Must</em> start with a <code>/</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull nsp;
/// The session id of this client.
@property (nonatomic, readonly, copy) NSString * _Nonnull sid;
/// The manager for this socket.
@property (nonatomic, readonly, weak) id <PayUSocketManagerSpec> _Nullable manager;
/// The status of this client.
@property (nonatomic, readonly) enum PayUSocketIOStatus status;
/// Type safe way to create a new SocketIOClient. <code>opts</code> can be omitted.
/// \param manager The manager for this socket.
///
/// \param nsp The namespace of the socket.
///
- (nonnull instancetype)initWithManager:(id <PayUSocketManagerSpec> _Nonnull)manager nsp:(NSString * _Nonnull)nsp OBJC_DESIGNATED_INITIALIZER;
/// Connect to the server. The same as calling <code>connect(timeoutAfter:withHandler:)</code> with a timeout of 0.
/// Only call after adding your event listeners, unless you know what you’re doing.
- (void)connect;
/// Connect to the server. If we aren’t connected after <code>timeoutAfter</code> seconds, then <code>withHandler</code> is called.
/// Only call after adding your event listeners, unless you know what you’re doing.
/// \param timeoutAfter The number of seconds after which if we are not connected we assume the connection
/// has failed. Pass 0 to never timeout.
///
/// \param handler The handler to call when the client fails to connect.
///
- (void)connectWithTimeoutAfter:(double)timeoutAfter withHandler:(void (^ _Nullable)(void))handler;
/// Disconnects the socket.
/// This will cause the socket to leave the namespace it is associated to, as well as remove itself from the
/// <code>manager</code>.
- (void)disconnect;
/// Same as emit, but meant for Objective-C
/// \param event The event to send.
///
/// \param items The items to send with this event. Send an empty array to send no data.
///
/// \param completion Callback called on transport write completion.
///
- (void)emit:(NSString * _Nonnull)event with:(NSArray * _Nonnull)items completion:(void (^ _Nullable)(void))completion;
/// Called when socket.io has acked one of our emits. Causes the corresponding ack callback to be called.
/// \param ack The number for this ack.
///
/// \param data The data sent back with this ack.
///
- (void)handleAck:(NSInteger)ack data:(NSArray * _Nonnull)data;
/// Called when we get an event from socket.io.
/// \param event The name of the event.
///
/// \param data The data that was sent with this event.
///
/// \param isInternalMessage Whether this event was sent internally. If <code>true</code> it is always sent to handlers.
///
/// \param ack If > 0 then this event expects to get an ack back from the client.
///
- (void)handleEvent:(NSString * _Nonnull)event data:(NSArray * _Nonnull)data isInternalMessage:(BOOL)isInternalMessage withAck:(NSInteger)ack;
/// Call when you wish to leave a namespace and disconnect this socket.
- (void)leaveNamespace;
/// Joins <code>nsp</code>.
- (void)joinNamespace;
/// Adds a handler for an event.
/// \param event The event name for this handler.
///
/// \param callback The callback that will execute when this event is received.
///
///
/// returns:
/// A unique id for the handler that can be used to remove it.
- (NSUUID * _Nonnull)on:(NSString * _Nonnull)event callback:(void (^ _Nonnull)(NSArray * _Nonnull, PayUSocketAckEmitter * _Nonnull))callback;
/// Adds a handler that will be called on every event.
/// \param handler The callback that will execute whenever an event is received.
///
- (void)onAny:(void (^ _Nonnull)(PayUSocketAnyEvent * _Nonnull))handler;
/// Puts the socket back into the connecting state.
/// Called when the manager detects a broken connection, or when a manual reconnect is triggered.
/// \param reason The reason this socket is reconnecting.
///
- (void)setReconnectingWithReason:(NSString * _Nonnull)reason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Represents state of a manager or client.
typedef SWIFT_ENUM(NSInteger, PayUSocketIOStatus, open) {
/// The client/manager has never been connected. Or the client has been reset.
  PayUSocketIOStatusNotConnected = 0,
/// The client/manager was once connected, but not anymore.
  PayUSocketIOStatusDisconnected = 1,
/// The client/manager is in the process of connecting.
  PayUSocketIOStatusConnecting = 2,
/// The client/manager is currently connected.
  PayUSocketIOStatusConnected = 3,
};


/// A manager for a socket.io connection.
/// A <code>SocketManagerSpec</code> is responsible for multiplexing multiple namespaces through a single <code>SocketEngineSpec</code>.
/// Example with <code>SocketManager</code>:
/// \code
/// let manager = SocketManager(socketURL: URL(string:"http://localhost:8080/")!)
/// let defaultNamespaceSocket = manager.defaultSocket
/// let swiftSocket = manager.socket(forNamespace: "/swift")
///
/// // defaultNamespaceSocket and swiftSocket both share a single connection to the server
///
/// \endcodeSockets created through the manager are retained by the manager. So at the very least, a single strong reference
/// to the manager must be maintained to keep sockets alive.
/// To disconnect a socket and remove it from the manager, either call <code>SocketIOClient.disconnect()</code> on the socket,
/// or call one of the <code>disconnectSocket</code> methods on this class.
SWIFT_PROTOCOL("_TtP14PayUUPICoreKit21PayUSocketManagerSpec_")
@protocol PayUSocketManagerSpec <PayUSocketEngineClient>
/// The engine for this manager.
@property (nonatomic, strong) id <PayUSocketEngineSpec> _Nullable engine;
/// If <code>true</code> then every time <code>connect</code> is called, a new engine will be created.
@property (nonatomic) BOOL forceNew;
/// The queue that all interaction with the client should occur on. This is the queue that event handlers are
/// called on.
@property (nonatomic, strong) dispatch_queue_t _Nonnull handleQueue;
/// The sockets in this manager indexed by namespace.
@property (nonatomic, copy) NSDictionary<NSString *, PayUSocketIOClient *> * _Nonnull nsps;
/// If <code>true</code>, this manager will try and reconnect on any disconnects.
@property (nonatomic) BOOL reconnects;
/// The minimum number of seconds to wait before attempting to reconnect.
@property (nonatomic) NSInteger reconnectWait;
/// The maximum number of seconds to wait before attempting to reconnect.
@property (nonatomic) NSInteger reconnectWaitMax;
/// The randomization factor for calculating reconnect jitter.
@property (nonatomic) double randomizationFactor;
/// The URL of the socket.io server.
@property (nonatomic, readonly, copy) NSURL * _Nonnull socketURL;
/// The status of this manager.
@property (nonatomic, readonly) enum PayUSocketIOStatus status;
/// Connects the underlying transport.
- (void)connect;
/// Connects a socket through this manager’s engine.
/// \param socket The socket who we should connect through this manager.
///
- (void)connectSocket:(PayUSocketIOClient * _Nonnull)socket;
/// Called when the manager has disconnected from socket.io.
/// \param reason The reason for the disconnection.
///
- (void)didDisconnectWithReason:(NSString * _Nonnull)reason;
/// Disconnects the given socket.
/// \param socket The socket to disconnect.
///
- (void)disconnectSocket:(PayUSocketIOClient * _Nonnull)socket;
@end


/// A manager for a socket.io connection.
/// A <code>SocketManager</code> is responsible for multiplexing multiple namespaces through a single <code>SocketEngineSpec</code>.
/// Example:
/// \code
/// let manager = SocketManager(socketURL: URL(string:"http://localhost:8080/")!)
/// let defaultNamespaceSocket = manager.defaultSocket
/// let swiftSocket = manager.socket(forNamespace: "/swift")
///
/// // defaultNamespaceSocket and swiftSocket both share a single connection to the server
///
/// \endcodeSockets created through the manager are retained by the manager. So at the very least, a single strong reference
/// to the manager must be maintained to keep sockets alive.
/// To disconnect a socket and remove it from the manager, either call <code>SocketIOClient.disconnect()</code> on the socket,
/// or call one of the <code>disconnectSocket</code> methods on this class.
/// <em>NOTE</em>: The manager is not thread/queue safe, all interaction with the manager should be done on the <code>handleQueue</code>
SWIFT_CLASS("_TtC14PayUUPICoreKit17PayUSocketManager")
@interface PayUSocketManager : NSObject <PayUSocketManagerSpec>
/// The URL of the socket.io server.
/// If changed after calling <code>init</code>, <code>forceNew</code> must be set to <code>true</code>, or it will only connect to the url set in the
/// init.
@property (nonatomic, readonly, copy) NSURL * _Nonnull socketURL;
/// The engine for this manager.
@property (nonatomic, strong) id <PayUSocketEngineSpec> _Nullable engine;
/// If <code>true</code> then every time <code>connect</code> is called, a new engine will be created.
@property (nonatomic) BOOL forceNew;
/// The queue that all interaction with the client should occur on. This is the queue that event handlers are
/// called on.
/// <em>This should be a serial queue! Concurrent queues are not supported and might cause crashes and races</em>.
@property (nonatomic, strong) dispatch_queue_t _Nonnull handleQueue;
/// The sockets in this manager indexed by namespace.
@property (nonatomic, copy) NSDictionary<NSString *, PayUSocketIOClient *> * _Nonnull nsps;
/// If <code>true</code>, this client will try and reconnect on any disconnects.
@property (nonatomic) BOOL reconnects;
/// The minimum number of seconds to wait before attempting to reconnect.
@property (nonatomic) NSInteger reconnectWait;
/// The maximum number of seconds to wait before attempting to reconnect.
@property (nonatomic) NSInteger reconnectWaitMax;
/// The randomization factor for calculating reconnect jitter.
@property (nonatomic) double randomizationFactor;
/// The status of this manager.
@property (nonatomic, readonly) enum PayUSocketIOStatus status;
/// Connects the underlying transport and the default namespace socket.
/// Override if you wish to attach a custom <code>SocketEngineSpec</code>.
- (void)connect;
/// Connects a socket through this manager’s engine.
/// \param socket The socket who we should connect through this manager.
///
- (void)connectSocket:(PayUSocketIOClient * _Nonnull)socket;
/// Called when the manager has disconnected from socket.io.
/// \param reason The reason for the disconnection.
///
- (void)didDisconnectWithReason:(NSString * _Nonnull)reason;
/// Disconnects the given socket.
/// This will remove the socket for the manager’s control, and make the socket instance useless and ready for
/// releasing.
/// \param socket The socket to disconnect.
///
- (void)disconnectSocket:(PayUSocketIOClient * _Nonnull)socket;
/// Called when the engine closes.
/// \param reason The reason that the engine closed.
///
- (void)engineDidCloseWithReason:(NSString * _Nonnull)reason;
/// Called when the engine errors.
/// \param reason The reason the engine errored.
///
- (void)engineDidErrorWithReason:(NSString * _Nonnull)reason;
/// Called when the engine opens.
/// \param reason The reason the engine opened.
///
- (void)engineDidOpenWithReason:(NSString * _Nonnull)reason;
/// Called when the engine receives a pong message.
- (void)engineDidReceivePong;
/// Called when the sends a ping to the server.
- (void)engineDidSendPing;
/// Called when when upgrading the http connection to a websocket connection.
/// \param headers The http headers.
///
- (void)engineDidWebsocketUpgradeWithHeaders:(NSDictionary<NSString *, NSString *> * _Nonnull)headers;
/// Called when the engine has a message that must be parsed.
/// \param msg The message that needs parsing.
///
- (void)parseEngineMessage:(NSString * _Nonnull)msg;
/// Called when the engine receives binary data.
/// \param data The data the engine received.
///
- (void)parseEngineBinaryData:(NSData * _Nonnull)data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC14PayUUPICoreKit23PayUSupportedCollectApp")
@interface PayUSupportedCollectApp : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull handles;
- (nullable instancetype)initWithItem:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)item OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAppName:(NSString * _Nonnull)appName handles:(NSArray<NSString *> * _Nonnull)handles OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit22PayUSupportedIntentApp")
@interface PayUSupportedIntentApp : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull scheme;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name scheme:(NSString * _Nonnull)scheme OBJC_DESIGNATED_INITIALIZER;
+ (BOOL)isEqualWithLhs:(PayUSupportedIntentApp * _Nonnull)lhs rhs:(PayUSupportedIntentApp * _Nonnull)rhs SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit21PayUThirdPartyManager")
@interface PayUThirdPartyManager : NSObject
+ (void)makePaymentWithApp:(PayUSupportedIntentApp * _Nonnull)app withIntentModel:(PayUPureS2SModel * _Nonnull)model appSwitchingStatus:(void (^ _Nonnull)(BOOL))appSwitchingStatus;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit23PayUTxnVerificationInfo")
@interface PayUTxnVerificationInfo : NSObject
- (nonnull instancetype)initWithUrlStr:(NSString * _Nonnull)urlStr mihpayid:(NSString * _Nonnull)mihpayid token:(NSString * _Nullable)token returnUrlStr:(NSString * _Nullable)returnUrlStr OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit16PayUUPIAnalytics")
@interface PayUUPIAnalytics : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PayUUPIAnalytics * _Nonnull shared;)
+ (PayUUPIAnalytics * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nullable analyticsString;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit11PayUUPICore")
@interface PayUUPICore : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PayUUPICore * _Nonnull shared;)
+ (PayUUPICore * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) enum NetworkEnvironment environment;
@property (nonatomic, readonly) BOOL showUserCancellationDialogue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, copy) void (^ _Nullable backPressed)(void);
@property (nonatomic, copy) NSString * _Nullable upiSdkVersion;
@property (nonatomic, copy) NSDate * _Nullable txnStartTime;
+ (NSArray<PayUSupportedIntentApp *> * _Nonnull)getInstalledAppsListForUpiOptions:(PayUUPIPaymentOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
+ (NSURL * _Nullable)getURIForApp:(PayUSupportedIntentApp * _Nonnull)app fromModel:(PayUPureS2SModel * _Nonnull)model SWIFT_WARN_UNUSED_RESULT;
+ (PayULoaderUPIAuthorisation * _Nonnull)getPayUCollectLoaderScreen SWIFT_WARN_UNUSED_RESULT;
+ (PayULoaderIntentPayment * _Nonnull)getPayUIntentPLoaderScreen SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getSchemeOfApp:(NSString * _Nonnull)appName withAllUpiOptions:(PayUUPIPaymentOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)canUseIntentForApp:(PayUSupportedIntentApp * _Nonnull)app withUpiOptions:(PayUUPIPaymentOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)canUseUpiCollectWithPaymentOptions:(PayUUPIPaymentOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)canUseGpayOmniWithPaymentOptions:(PayUUPIPaymentOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)canUseGpayCollectWithPaymentOptions:(PayUUPIPaymentOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)canUseGpayAppWithPaymentOptions:(PayUUPIPaymentOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit16PayUUPICoreUtils")
@interface PayUUPICoreUtils : NSObject
+ (NSDictionary<NSString *, NSString *> * _Nonnull)getMandatoryParamsForUnderscorePaymentFromParams:(PayUPaymentParam * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)getMandatoryTPVParamsForUnderscorePaymentFromParams:(PayUPaymentParam * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
+ (NSURL * _Nonnull)getInfoURL SWIFT_WARN_UNUSED_RESULT;
+ (NSURL * _Nonnull)getSecureURL SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getVersionOfBundle:(NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<PayUSupportedCollectApp *> * _Nonnull)getDefaultUPICollectAppsWithHandles SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit27PayUUPIHybridCollectHandler")
@interface PayUUPIHybridCollectHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit26PayUUPIHybridIntentHandler")
@interface PayUUPIHybridIntentHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit21PayUUPIPaymentOptions")
@interface PayUUPIPaymentOptions : NSObject
@property (nonatomic, readonly, strong) PayUPaymentOption * _Nullable upi;
@property (nonatomic, readonly, strong) PayUPaymentOption * _Nullable tez;
@property (nonatomic, readonly, strong) PayUPaymentOption * _Nullable tezOmni;
@property (nonatomic, readonly, strong) PayUPaymentOption * _Nullable intent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PayUUPIType, open) {
  PayUUPITypePhonepe = 0,
  PayUUPITypeGpay = 1,
  PayUUPITypePaytm = 2,
  PayUUPITypeBhim = 3,
  PayUUPITypeCredPay = 4,
  PayUUPITypeGpayOmni = 5,
  PayUUPITypeNewType = 6,
  PayUUPITypeUnknown = 7,
};


SWIFT_CLASS("_TtC14PayUUPICoreKit20PayUValidateVPAModel")
@interface PayUValidateVPAModel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
@property (nonatomic, readonly, copy) NSString * _Nullable msg;
@property (nonatomic, readonly, copy) NSString * _Nullable vpa;
@property (nonatomic, readonly, copy) NSString * _Nullable payerAccountName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit13PayUValidator")
@interface PayUValidator : NSObject
+ (BOOL)isValidMobile:(NSString * _Nonnull)mobile SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14PayUUPICoreKit13PayUWebSocket")
@interface PayUWebSocket : NSObject <NSStreamDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
